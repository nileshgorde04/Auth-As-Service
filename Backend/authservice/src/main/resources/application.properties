# Server Configuration
server.port=8080

# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/authservice
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true

# JWT Configuration
jwt.secret=your_jwt_secret_key_should_be_at_least_256_bits_long_for_security
jwt.access-token.expiration=900000  # 15 minutes in milliseconds
jwt.refresh-token.expiration=604800000  # 7 days in milliseconds

# OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=your-google-client-id
spring.security.oauth2.client.registration.google.client-secret=your-google-client-secret
spring.security.oauth2.client.registration.google.scope=email,profile

spring.security.oauth2.client.registration.github.client-id=your-github-client-id
spring.security.oauth2.client.registration.github.client-secret=your-github-client-secret
spring.security.oauth2.client.registration.github.scope=user:email,read:user

# OAuth2 Redirect URIs
oauth2.authorized-redirect-uri=http://localhost:3000/oauth2/redirect

# CORS Configuration
cors.allowed-origins=http://localhost:3000
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed-headers=Authorization,Content-Type
cors.max-age=3600

# Logging Configuration
logging.level.org.springframework.security=DEBUG
logging.level.com.nilesh.authservice=DEBUG